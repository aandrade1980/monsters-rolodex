{"version":3,"sources":["components/card/card.tsx","components/card-list/card-list.tsx","components/search-box/search-box.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","key","CardList","props","monsters","map","SearchBox","type","placeholder","placeHolder","onChange","handleChange","App","state","searchField","e","setState","target","value","fetch","response","json","users","this","filteredMonsters","filter","monster","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uWAOaA,G,YAAO,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAC/B,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAG,+BAA0BJ,EAA1B,0BACHK,IAAI,YAEN,wBAAIC,IAAKN,GAAKC,GACd,2BAAIC,MCCGK,G,MAAW,SAACC,GACvB,OACE,yBAAKL,UAAU,aACZK,EAAMC,SAASC,KAAI,gBAAGV,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAb,OAClB,kBAAC,EAAD,CAAMI,IAAKN,EAAIA,GAAIA,EAAIC,KAAMA,EAAMC,MAAOA,UCXrCS,G,MAAY,SAACH,GAAD,OACvB,2BACEL,UAAU,SACVS,KAAK,SACLX,KAAK,SACLD,GAAG,SACHa,YAAaL,EAAMM,YACnBC,SAAUP,EAAMQ,iBCwBLC,E,4MAhCbC,MAAQ,CACNT,SAAU,GACVU,YAAa,I,EASfH,aAAe,SAACI,GAAD,OACb,EAAKC,SAAS,CAAEF,YAAaC,EAAEE,OAAOC,S,oMANfC,MAAM,8C,cAAvBC,E,gBACcA,EAASC,O,OAAvBC,E,OACNC,KAAKP,SAAS,CAAEZ,SAAUkB,I,qIAMlB,IAAD,EAC2BC,KAAKV,MAA/BT,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAACC,GAAD,OACvCA,EAAQ9B,KAAK+B,cAAcC,SAASd,EAAYa,kBAElD,OACE,yBAAK7B,UAAU,OACb,gDACA,kBAAC,EAAD,CACEW,YAAY,yBACZE,aAAcY,KAAKZ,eAErB,kBAAC,EAAD,CAAUP,SAAUoB,S,GA3BVK,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b33187ff.chunk.js","sourcesContent":["import React from \"react\";\n\n// Components\nimport { ICard } from \"../card-list/card-list\";\n\nimport \"./card.css\";\n\nexport const Card = ({ id, name, email }: ICard) => {\n  return (\n    <div className=\"card-container\">\n      <img\n        src={`https://robohash.org/${id}?set=set2&size=180x180`}\n        alt=\"monster\"\n      />\n      <h2 key={id}>{name}</h2>\n      <p>{email}</p>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { Card } from \"../card/card\";\n\nimport \"./card-list.css\";\n\nexport interface ICard {\n  id: number;\n  name: string;\n  email: string;\n}\n\ninterface ICardList {\n  monsters: ICard[];\n}\n\nexport const CardList = (props: ICardList) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map(({ id, name, email }: ICard) => (\n        <Card key={id} id={id} name={name} email={email} />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport \"./search-box.css\";\n\ninterface ISearchBox {\n  placeHolder: string;\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const SearchBox = (props: ISearchBox) => (\n  <input\n    className=\"search\"\n    type=\"search\"\n    name=\"search\"\n    id=\"search\"\n    placeholder={props.placeHolder}\n    onChange={props.handleChange}\n  />\n);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\n// Components\nimport { CardList, ICard } from \"./components/card-list/card-list\";\nimport { SearchBox } from \"./components/search-box/search-box\";\n\nclass App extends Component {\n  state = {\n    monsters: [],\n    searchField: \"\"\n  };\n\n  async componentDidMount() {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const users = await response.json();\n    this.setState({ monsters: users });\n  }\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>): void =>\n    this.setState({ searchField: e.target.value });\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster: ICard) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeHolder=\"Search for Monsters...\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}